<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SlipBox</title><link>https://suguni.github.io/</link><description>Recent content on SlipBox</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>ysk</copyright><lastBuildDate>Wed, 05 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://suguni.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Iterator, IntoIterator, Iter, IterMut, IntoIter, iter, iter_mut, into_iter</title><link>https://suguni.github.io/posts/rust-iterator/</link><pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate><guid>https://suguni.github.io/posts/rust-iterator/</guid><description>처음 rust 를 배우기 시작 했을때 Iterator 는 다른 언어들에서도 쉽게 봐왔던거라 어렵지 않게 넘어갔었는데, 이후 여러 코드를 보면 볼수록 정확히 모르고 있구나 라고 생각되던 상황에 Rust Stream: Iterators 동영상을 보고 나름 개념정리가 된 듯 하여 글로 작성해 둔다.
Iterator trait 은 잘 알려진 반복자 디자인 패턴의 그 iterator 이다. Iterator trait 에는 아주 많은 함수가 있는데, 필수 구현해야 하는 함수는 fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Item&amp;gt; 하나이다. Option 타입을 반환하니 has_next() 같은 함수가 필요 없다.</description></item><item><title>Unit Testing</title><link>https://suguni.github.io/posts/unit-testing/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://suguni.github.io/posts/unit-testing/</guid><description>TDD 까지는 아니더라도 어떻게 하면 좋은 테스트 코드를 작성할 것인가는 늘 어려운 문제였다. 어떻게든 작성해 보려고 하지만 올바른 테스트 코드인지 판단이 잘 안되고 커밋하더라도 어느 순간 관리되지 않는 코드가 되기 십상이었다.
늘 관심이 있는 영역이라 오래전에 xUnit Test Pattern 를 읽어보려 했는데, 내용이 너무 방대하고 기본적인 개념들이 많이 부족한 상태라 포기하고 그냥 책꽂이만 있어온지가 한참되었다.
그러다 최근 백명석님의 Refactoring - Functional Core &amp;amp; Mutable Shell 영상을 보고 빨리 봐야겠다는 생각이 들어 읽기 시작했는데 아직 절반정도 읽은 상태.</description></item><item><title>Evil Mode</title><link>https://suguni.github.io/posts/evil-mode/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><guid>https://suguni.github.io/posts/evil-mode/</guid><description>요 몇일동안 vi를 공부 했는데, 그 동안 에디터를 제대로 활용하고 있지 못했구나라는 생각이 든다. 정말 말 그대로 공부다. Oreilly 에서 Vim Masterclass라는 5시간 정도되는 동영상 강의를 따라하면서 봤다. Vim Masterclass 강의 추천한다.</description></item><item><title>Blogging Hugo Emacs</title><link>https://suguni.github.io/posts/blogging-hugo-emacs/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>https://suguni.github.io/posts/blogging-hugo-emacs/</guid><description>블로깅을 시작하겠다고 hugo 셋팅하고 간단하게 github 에다 테스트 같은 포스트 하나 올려놓고 방치해 놨었는데 이제 진짜 해보려 한다. 블로깅 환경은 hugo, emacs, ox-hugo, github page 이다. 흐름은 emacs 에서 org 문서 형태로 포스트 작성하고 ox-hugo 를 이용해 hugo markdown 파일로 변환한 후, 미리 작성된 스크립트로 publish 하게 된다. hugo - github 연동은 잘 알려진 내용이니 ox-hugo - hugo 부분만 간단히 정리한다.
github action [2022-05-01 Sun] 추가
최근에 JAMstack 이라는 용어가 눈에 띄어 찾아 보다 여기가 생각나서 github action 으로 편하게 사용할 수 있는 방법이 있음을 알게 되었다.</description></item><item><title>New Arrival</title><link>https://suguni.github.io/posts/new-arrival/</link><pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate><guid>https://suguni.github.io/posts/new-arrival/</guid><description>다시 hugo 블로그를 셋업했다.</description></item><item><title>인용구</title><link>https://suguni.github.io/quotes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://suguni.github.io/quotes/</guid><description>시스템 구조는 그 시스템을 설계하는 조직의 통신 구조를 그대로 따라갈 수 밖에 없다. Melvin Conway, 1968.4, How do committes invent?</description></item></channel></rss>